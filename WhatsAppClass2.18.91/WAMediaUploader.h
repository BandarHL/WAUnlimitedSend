//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Nov  9 2017 20:17:28).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <Core/WAChatDataStoreMediaManager.h>

#import "WAMMSMediaExistCheckUploadOperationDelegate-Protocol.h"
#import "WAMMSMediaUploadOperationDelegate-Protocol.h"

@class NSMutableDictionary, WAMMSTaskSessionV4, WAOptimisticMediaUploadManager, WAPersistentRequestManager, WASimpleOperationQueue, XMPPConnection;

__attribute__((visibility("hidden")))
@interface WAMediaUploader : WAChatDataStoreMediaManager <WAMMSMediaUploadOperationDelegate, WAMMSMediaExistCheckUploadOperationDelegate>
{
    WASimpleOperationQueue *_uploadQueue;
    NSMutableDictionary *_existCheckOnlyPool;
    NSMutableDictionary *_operationForMessageKey;
    NSMutableDictionary *_pendingShareExtensionUploadRequests;
    WAMMSTaskSessionV4 *_mmsTaskSession;
    XMPPConnection *_xmppConnection;
    WAPersistentRequestManager *_persistentRequestManager;
    WAOptimisticMediaUploadManager *_optimisticMediaUploadManager;
}

+ (id)mediaItemsWithPlaintextHash:(id)arg1 inContext:(id)arg2;
+ (void)checkAndRepairMp4AtPath:(id)arg1 dstPath:(id)arg2 completion:(CDUnknownBlockType)arg3;
+ (void)transcodeVideoWithFilePath:(id)arg1 completion:(CDUnknownBlockType)arg2;
+ (void)transcodeAudioWithFilePath:(id)arg1 completion:(CDUnknownBlockType)arg2;
+ (id)asyncResumeCheckResultForMessage:(id)arg1;
+ (_Bool)messageIsValidForAsyncResumeCheck:(id)arg1;
+ (_Bool)messageIsEligibleForAsyncResumeCheck:(id)arg1;
+ (_Bool)messageIsEligibleForFastForward:(id)arg1;
+ (id)createAssetForPath:(id)arg1 mediaType:(unsigned long long)arg2 mimeType:(id)arg3;
+ (id)mediaUploadResultForOperationResult:(id)arg1 reuploading:(_Bool)arg2;
+ (void)setupUserInfoForRequest:(id)arg1 messages:(id)arg2 mediaKey:(id)arg3 reuseReason:(unsigned long long)arg4 reuploading:(_Bool)arg5 asyncResumeCheckResult:(id)arg6 completion:(CDUnknownBlockType)arg7;
@property(readonly, nonatomic) WAOptimisticMediaUploadManager *optimisticMediaUploadManager; // @synthesize optimisticMediaUploadManager=_optimisticMediaUploadManager;
@property(readonly, nonatomic) WAPersistentRequestManager *persistentRequestManager; // @synthesize persistentRequestManager=_persistentRequestManager;
@property(readonly, nonatomic) XMPPConnection *xmppConnection; // @synthesize xmppConnection=_xmppConnection;
@property(readonly, nonatomic) WAMMSTaskSessionV4 *mmsTaskSession; // @synthesize mmsTaskSession=_mmsTaskSession;
- (void).cxx_destruct;
- (void)updateMediaValuesForUploadWithEncHash:(id)arg1 plaintextHash:(id)arg2 mediaURL:(id)arg3 directPath:(id)arg4 mediaURLDate:(id)arg5;
- (void)updateMediaForUploadedMessage:(id)arg1;
- (void)needUploadReadyAssetFromAsset:(id)arg1 mediaKeyForReuse:(id)arg2 reuseReason:(unsigned long long)arg3 skipMediaKeyReuse:(_Bool)arg4 completion:(CDUnknownBlockType)arg5;
- (void)existCheckTask:(id)arg1 needUploadReadyAssetFromAsset:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)uploadTask:(id)arg1 needUploadReadyAssetFromAsset:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)cancelOptimisticExistChecksWithIdentifiers:(id)arg1;
- (void)cancelOptimisticUploadsWithIdentifiers:(id)arg1;
- (id)startOptimisticMediaUploadForFile:(id)arg1 mediaType:(unsigned long long)arg2 mimeType:(id)arg3 identifier:(id)arg4 cellularAllowed:(_Bool)arg5 skipResumeCheck:(_Bool)arg6 isForward:(_Bool)arg7 firstScanLength:(unsigned long long)arg8 delegate:(id)arg9;
- (float)progressOfMediaUploadForMessage:(id)arg1;
- (void)fetchMostRecentItemForReuseWithPlaintextFileHash:(id)arg1 mediaKeyData:(out id *)arg2 mediaKeyDate:(out id *)arg3 mediaKeyReuseReason:(out unsigned long long *)arg4 mediaFilePath:(out id *)arg5 asyncResumeCheckResult:(out id *)arg6;
- (id)mediaItemWithFileHash:(id)arg1 inContext:(id)arg2;
- (id)pendingShareExtensionUploadRequests;
- (id)operationForMessageKey;
- (id)existCheckOnlyPool;
- (id)uploadQueue;
- (id)initWithChatDataStores:(id)arg1 mmsTaskSession:(id)arg2 xmppConnection:(id)arg3 persistentRequestManager:(id)arg4;
- (id)existCheckTask:(id)arg1 canSkipUploadWithMediaType:(unsigned long long)arg2 encHash:(id)arg3 plaintextHash:(id)arg4;
- (void)existCheckTask:(id)arg1 willRetryWithUploadEvent:(id)arg2 uploadEvent2:(id)arg3;
- (void)existCheckTask:(id)arg1 didFinishWithResult:(unsigned long long)arg2 existingAsset:(id)arg3 directPath:(id)arg4 mmsv3DownloadURL:(id)arg5 skippedUpload:(_Bool)arg6 uploadEvent:(id)arg7 uploadEvent2:(id)arg8 error:(id)arg9 terminal:(_Bool)arg10;
- (_Bool)handleFinishedOptimisticUploadTask:(id)arg1 messages:(id)arg2 result:(id)arg3 uploadEvent:(id)arg4 uploadEvent2:(id)arg5 error:(id)arg6;
- (void)regularUploadTaskCompletedWithResult:(id)arg1 error:(id)arg2 messages:(id)arg3 reuploading:(_Bool)arg4 terminal:(_Bool)arg5 skippedUpload:(_Bool)arg6;
- (id)uploadTask:(id)arg1 canSkipUploadWithMediaType:(unsigned long long)arg2 encHash:(id)arg3 plaintextHash:(id)arg4;
- (void)uploadTask:(id)arg1 willRetryWithUploadEvent:(id)arg2 uploadEvent2:(id)arg3;
- (void)uploadTask:(id)arg1 didFinishWithResult:(id)arg2 uploadEvent:(id)arg3 uploadEvent2:(id)arg4 error:(id)arg5 terminal:(_Bool)arg6;
- (void)uploadTask:(id)arg1 willBeginUploadWithMediaKey:(id)arg2 reuseReason:(unsigned long long)arg3 ciphertextHash:(id)arg4;
- (void)uploadTask:(id)arg1 didUpdateProgress:(double)arg2;
- (id)startOptimisticExistCheckForFile:(id)arg1 mediaType:(unsigned long long)arg2 mimeType:(id)arg3 identifier:(id)arg4 firstScanLength:(unsigned long long)arg5;
- (id)startOptimisticMediaUploadForFile:(id)arg1 mediaType:(unsigned long long)arg2 mimeType:(id)arg3 identifier:(id)arg4 cellularAllowed:(_Bool)arg5 skipResumeCheck:(_Bool)arg6 isForward:(_Bool)arg7 firstScanLength:(unsigned long long)arg8;
- (_Bool)enqueueAsyncResumeCheckWithMediaType:(unsigned long long)arg1 encHash:(id)arg2 plaintextHash:(id)arg3 metrics:(id)arg4;
- (id)canSkipUploadWithMediaType:(unsigned long long)arg1 encHash:(id)arg2 plaintextHash:(id)arg3 attachedMessages:(id)arg4 asyncResumeCheckResult:(id)arg5 metrics:(id)arg6;
- (void)enqueuePersistentExistCheckForMediaType:(unsigned long long)arg1 encHash:(id)arg2 plaintextHash:(id)arg3 metrics:(id)arg4;
- (_Bool)validateAndEnqueuePersistentExistCheckForMessageFastForward:(id)arg1;
- (void)uploadTaskCompletedWithResult:(id)arg1 error:(id)arg2 messages:(id)arg3 terminal:(_Bool)arg4 skippedUpload:(_Bool)arg5;
- (void)cancelStreamingUploadOperation:(id)arg1;
- (void)cancelAllUploads;
- (_Bool)cancelUploadForItemWithUniqueID:(id)arg1;
- (void)cancelUploadForMessage:(id)arg1 userInitiated:(_Bool)arg2;
- (void)mediaUploadBeganForMessages:(id)arg1;
- (_Bool)handleOptimisticUploadForMessages:(id)arg1 templateMessage:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (_Bool)startMediaUploadForMessages:(id)arg1 templateMessage:(id)arg2 reuploading:(_Bool)arg3 additionalRecipients:(id)arg4 completion:(CDUnknownBlockType)arg5;
- (_Bool)startMediaUploadForMessages:(id)arg1;
- (void)reuploadMediaInMessage:(id)arg1 requesterIsWebClient:(_Bool)arg2 extraRecipientJIDs:(id)arg3 completion:(CDUnknownBlockType)arg4;
- (id)streamingPTTUploadOperationForMediaAtPath:(id)arg1;
- (_Bool)existCheckOnlyUploadForMessages:(id)arg1;
- (unsigned long long)countOfInProgressUploads;

@end

